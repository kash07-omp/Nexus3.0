@using Nexus.Domain.Entities
@using System.Globalization
@model Nexus.Web.Models.RegionViewModel

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger mt-4">
            @TempData["ErrorMessage"]
        </div>
    }

<div id="region" class="detail" data-item-id="@Model.Region.Id">
    <div class="nx-header">
        <ul class="nx-menu nx-menu-landscape">
            <li class="city-resources active info-box">
                <div>
                    <ul>
                        @foreach (RegionResource resource in Model.Region.RegionResources)
                        {
                            <li><i class="resource resource-@resource.ResourceId"></i> @resource.Quantity.ToString("N0", new CultureInfo("es-ES"))</li>
                        }
                        <li><i class="resource resource-7"></i> <span class="@(Model.Region.AvailableEnergy < 0 ? "wrong" : string.Empty)">@Model.Region.AvailableEnergy.ToString("N0", new CultureInfo("es-ES"))/@Model.Region.TotalEnergy.ToString("N0", new CultureInfo("es-ES"))</span></li>
                    </ul>
                </div>
            </li>
            <li class="data-panel cyber-razor-bottom">
                <div class="detail">
                    <h1 class="cyber-h">New Horizon</h1>
                    <ul>
                        <li><strong>Población</strong> 131.650</li>
                        <li><strong>Felicidad</strong> 08/10</li>
                        <li><strong>Soldados</strong> 25.000</li>
                        <li><strong>Naves militares</strong> 56</li>
                        <li><strong>Naves civiles</strong> 13</li>
                    </ul>
                    <div class="deck" title="Gobernador de la región"></div>
                </div>
            </li>
        </ul>
        <ul class="nx-submenu">
            <li><a href="#" data-view="city" class="new active">Ciudad</a></li>
            <li><a href="#" data-view="barracks" class="new">Barracones</a></li>
            <li><a href="#" data-view="spaceport" class="new">Espaciopuerto</a></li>
            <li><a href="/solarsystem/detail/@Model.Region.Planet.SolarSystemId" class="new">Sistema solar</a></li>
        </ul>
    </div>
    <div class="nx-detail">
        @await Html.PartialAsync("_RegionDetailCityPartialView", Model)
    </div>
</div>
@Html.AntiForgeryToken()

    <style>
        main.content > div.detail div.nx-header li.data-panel div.deck { background-image: url(/images/@Model.Region.GovernorCard.ImageUrl); }
    </style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        structureUpgradeOverlay();
        initMenu();
    });

    function onOpenStructureDialog() {
        modalUpgradeOverlay();
    }

    function modalUpgradeOverlay() {
        const structureInfo = document.querySelector('#dlgstructure div.structure-info');
        const structureId = Number(structureInfo.getAttribute('data-item-id'));
        const structureElement = document.querySelector(`section.card-grid p.card.structure[data-item-id="${structureId}"]`);

        // Verificar si el elemento tiene 'data-item-upgradedat' con valor
        const upgradedAtValue = structureElement.getAttribute('data-item-upgradedat');
        if (upgradedAtValue) {
            const detailsElement = document.querySelector('#dlgstructure div.structure-details');

            // Iniciar la cuenta regresiva en el modal
            startUpgradeCountdown(detailsElement, upgradedAtValue);

            // Limpiar el intervalo cuando se cierra el modal
            const dlgstructure = document.getElementById('dlgstructure');
            dlgstructure.addEventListener('hidden.bs.modal', function () {
                if (detailsElement._countdownInterval) {
                    clearInterval(detailsElement._countdownInterval);
                    detailsElement._countdownInterval = null;
                }
            });
        }
    }

    function structureUpgradeOverlay() {
        const structureElements = document.querySelectorAll('section.card-grid p.card.structure[data-item-upgradedat]');

        structureElements.forEach(structure => {
            const upgradedAtValue = structure.getAttribute('data-item-upgradedat');
            if (upgradedAtValue) {
                startUpgradeCountdown(structure, upgradedAtValue);
            }
        });
    }

    function startUpgradeCountdown(element, upgradedAtValue) {
        // Parsear 'upgradedAtValue' a un objeto Date
        const upgradeEndDate = convertToJsDate(upgradedAtValue);

        // Crear el elemento de cuenta regresiva si no existe
        let countdownDiv = element.querySelector('.upgrade-structure-countdown');
        if (!countdownDiv) {
            countdownDiv = document.createElement('div');
            countdownDiv.className = 'upgrade-structure-countdown';
            element.appendChild(countdownDiv);
        }

        // Asegurar que el elemento padre tiene posición relativa
        if (window.getComputedStyle(element).position === 'static') {
            element.style.position = 'relative';
        }

        // Función para actualizar la cuenta regresiva
        function updateCountdown() {
            const now = new Date();
            const timeRemaining = upgradeEndDate - now;

            if (timeRemaining <= 0) {
                countdownDiv.innerText = '¡Actualización completada!';
                // Opcionalmente, eliminar el elemento después de un tiempo
                setTimeout(() => countdownDiv.remove(), 2000);
                clearInterval(countdownInterval);
                element._countdownInterval = null;
            } else {
                const hours = Math.floor((timeRemaining / (1000 * 60 * 60)) % 24);
                const minutes = Math.floor((timeRemaining / (1000 * 60)) % 60);
                const seconds = Math.floor((timeRemaining / 1000) % 60);
                countdownDiv.innerText = `${hours}h ${minutes}m ${seconds}s`;
            }
        }

        // Iniciar la cuenta regresiva
        updateCountdown();
        const countdownInterval = setInterval(updateCountdown, 1000);

        // Almacenar el identificador del intervalo en el elemento
        element._countdownInterval = countdownInterval;
    }

    function initMenu() {
            // Función para manejar los clics en el submenú
            const submenuLinks = document.querySelectorAll('.nx-submenu a[data-view]');
            submenuLinks.forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();

                    // Remover la clase 'active' de todos los enlaces y agregarla al enlace clicado
                    submenuLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');

                    const view = this.getAttribute('data-view');
                    const regionId = document.getElementById('region').getAttribute('data-item-id');
                    let url = '';

                    switch (view) {
                        case 'city':
                            url = `/Region/GetCityPartialView?regionId=${regionId}`;
                            break;
                        case 'barracks':
                            url = `/Region/GetBarracksPartialView?regionId=${regionId}`;
                            break;
                        case 'spaceport':
                            url = `/Region/GetSpaceportPartialView?regionId=${regionId}`;
                            break;
                        default:
                            return;
                    }

                    // Cargar la vista parcial mediante fetch
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Error al cargar la vista parcial');
                            }
                            return response.text();
                        })
                        .then(html => {
                            // Reemplazar el contenido de div.nx-detail
                            const nxDetail = document.querySelector('.nx-detail');
                            nxDetail.innerHTML = html;

                            // Re-inicializar eventos y funciones si es necesario
                            if (view === 'city') {
                                structureUpgradeOverlay();
                                bindStructureClickEvents();
                            } else if (view === 'spaceport') {
                                initSpaceportScripts();
                            }
                            // Puedes agregar más condiciones para otras vistas
                        })
                        .catch(error => {
                            console.error('Error al cargar la vista parcial:', error);
                        });

                });
            });

            // Función para vincular los eventos de clic a las estructuras
            function bindStructureClickEvents() {
                const structureElements = document.querySelectorAll('p.structure');
                structureElements.forEach(structure => {
                    structure.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        const params = Number(this.getAttribute('data-item-id'));
                        const regionId = document.getElementById('region').getAttribute('data-item-id');

                        nxDialogs.ajaxDialog('dlgstructure', '/Region/' + regionId + '/openstructuredialog', params, onOpenStructureDialog);
                    });
                });
            }

            // Inicializar eventos al cargar la página
            bindStructureClickEvents();
    }

    function initSpaceportScripts() {
        // Código JavaScript para manejar eventos y acciones en el Espaciopuerto
        // ...

        // Obtener el token antifalsificación
        var tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        var token = tokenInput ? tokenInput.value : '';

        // Manejar el clic en "Crear flota" cuando no hay flotas
        var createFleetButton = document.getElementById('createFleetButton');
        if (createFleetButton) {
            createFleetButton.addEventListener('click', function () {
                var fleetName = document.getElementById('newFleetName').value.trim();
                if (fleetName) {
                    createFleet(@Model.Region.Id, fleetName, token);
                } else {
                    alert('Por favor, ingrese un nombre para la flota.');
                }
            });
        }

        // Mostrar el formulario para crear una nueva flota
        var showCreateFleetForm = document.getElementById('showCreateFleetForm');
        if (showCreateFleetForm) {
            showCreateFleetForm.addEventListener('click', function (e) {
                e.preventDefault();
                document.getElementById('createFleetForm').style.display = 'block';
            });
        }

        // Manejar el clic en el botón "Guardar" del formulario de creación de flota
        var saveFleetButton = document.getElementById('saveFleetButton');
        if (saveFleetButton) {
            saveFleetButton.addEventListener('click', function () {
                var fleetName = document.getElementById('newFleetName').value.trim();
                if (fleetName) {
                    createFleet(@Model.Region.Id, fleetName, token);
                } else {
                    alert('Por favor, ingrese un nombre para la flota.');
                }
            });
        }

        // Función para crear una flota mediante AJAX
        function createFleet(regionId, fleetName, token) {
            fetch('/Region/CreateFleet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ regionId: regionId, fleetName: fleetName })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Recargar la vista parcial del Espaciopuerto
                        loadSpaceportView(regionId);
                    } else {
                        alert(data.message || 'Error al crear la flota.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Función para cargar la vista parcial del Espaciopuerto
        function loadSpaceportView(regionId, fleetId) {
            var url = `/Region/GetSpaceportPartialView?regionId=${regionId}`;
            if (fleetId) {
                url += `&fleetId=${fleetId}`;
            }

            fetch(url)
                .then(response => response.text())
                .then(html => {
                    const nxDetail = document.querySelector('.nx-detail');
                    nxDetail.innerHTML = html;

                    // Re-inicializar los scripts del Espaciopuerto
                    initSpaceportScripts();
                })
                .catch(error => {
                    console.error('Error al cargar la vista parcial:', error);
                });
        }

        // Manejar la selección de flotas
        var fleetLinks = document.querySelectorAll('.fleet-link');
        fleetLinks.forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                var fleetId = this.getAttribute('data-fleet-id');
                loadSpaceportView(@Model.Region.Id, fleetId);
            });
        });
    }
    </script>
