@model Nexus.Web.Models.SolarSystemViewModel

<div class="container">
    <h2>Detalle del sistema solar: @Model.SolarSystem.Name</h2>

    <div id="solarSystemGrid">
        @for (int y = 1; y <= Model.SolarSystem.GridSizeY; y++)
        {
            @for (int x = 1; x <= Model.SolarSystem.GridSizeX; x++)
            {
                var cellClass = "solar-system-cell";
                var dataItemId = "";
                var cellContent = new List<string>();

                // Estrella en el centro del sistema solar
                if (x == Model.SolarSystem.GridSizeX / 2 + 1 && y == Model.SolarSystem.GridSizeY / 2 + 1)
                {
                    cellClass += " estrella";
                    cellContent.Add("Estrella");
                }
                else
                {
                    // Planetas, campos de asteroides, puertas de salto, y flotas
                    var planet = Model.SolarSystem.Planets.FirstOrDefault(p => p.CoordinateX == x && p.CoordinateY == y);
                    var asteroid = Model.SolarSystem.AsteroidFields.FirstOrDefault(a => a.CoordinateX == x && a.CoordinateY == y);
                    var jumpGate = Model.SolarSystem.JumpGates.FirstOrDefault(j => j.CoordinateX == x && j.CoordinateY == y);
                    var fleets = Model.SolarSystem.Fleets.Where(f => f.CoordinateX == x && f.CoordinateY == y).ToList();

                    if (planet != null)
                    {
                        cellClass += " planet";
                        cellContent.Add("Planeta");
                        dataItemId = planet.Id.ToString();

                        // Si el planeta pertenece al usuario actual
                        var userPlanet = planet.Regions.FirstOrDefault(r => r.UserId == Model.CurrentUser.Id);
                        if (userPlanet != null)
                            cellClass += " planet-own";
                    }
                    else if (asteroid != null)
                    {
                        cellClass += " asteroidfield";
                        cellContent.Add("Campo de asteroides");
                        dataItemId = asteroid.Id.ToString();
                    }
                    else if (jumpGate != null)
                    {
                        cellClass += " jumppoint";
                        cellContent.Add("Puerta de salto");
                        dataItemId = jumpGate.Id.ToString();
                    }

                    // Mostrar todas las flotas en la celda
                    foreach (var fleet in fleets)
                    {
                        var fleetClass = fleet.UserId == Model.CurrentUser.Id ? " fleet-own" : " fleet-enemy";
                        var fleetName = fleet.Name;

                        // Verificar si la flota tiene movimientos pendientes en FleetMovementPaths
                        if (fleet.FleetMovementPaths.Any())
                            fleetName += "*";

                        cellContent.Add($"<span class='{fleetClass}' data-item-id='{fleet.Id}'>{fleetName}</span>");
                    }
                }

                <div class="@cellClass" data-item-id="@dataItemId" data-item-x="@x" data-item-y="@y">
                    @Html.Raw(string.Join("<br/>", cellContent))
                </div>
            }
        }
    </div>

    <!-- Menú contextual -->
    <div id="contextMenu" class="context-menu">
        <ul>
            <li id="action-view-planet" onclick="reloadPage()">Ver planeta</li>
            <li id="action-mine-asteroid" onclick="reloadPage()">Minar</li>
            <li id="action-jump-gate" onclick="reloadPage()">Saltar</li>
            <li id="action-view-fleet" onclick="reloadPage()">Ver flota</li>
            <li id="action-spy-fleet" onclick="reloadPage()">Espiar</li>
            <li id="action-attack-fleet" onclick="reloadPage()">Atacar</li>
            <li id="action-move-fleet" onclick="moveFleet()">Mover flota</li>
        </ul>
    </div>
</div>

@section Styles {
    <style>
        /* Configuración general del fondo */
        body { background-image: url('https://i.pinimg.com/originals/1a/ba/73/1aba73d7d0cf7299158082fab3d8bfa3.jpg'); background-size: cover; background-attachment: fixed; margin: 0; padding: 0; color: white; }

        /* Estilos del contenedor del sistema solar */
        #solarSystemGrid { display: grid; grid-template-columns: repeat(@Model.SolarSystem.GridSizeX, 1fr); grid-template-rows: repeat(@Model.SolarSystem.GridSizeY, 1fr); }

        /* Estilos de las celdas del grid */
        .solar-system-cell { height: 75px; border: 1px solid #ffffff80; display: flex; justify-content: center; align-items: center; background-color: rgba(0, 0, 0, 0.5); text-align: center; color: white; flex-direction: column; }
        
        /* Estilo para planetas */
        .solar-system-cell.planet { background-color: rgba(0, 123, 255, 0.3); }

        /* Estilo especial para planetas del usuario */
        .solar-system-cell.planet-own { color: green; font-weight: bold; }

        /* Estilo para campos de asteroides */
        .solar-system-cell.asteroidfield { background-color: rgba(128, 128, 128, 0.3); }

        /* Estilo para puertas de salto */
        .solar-system-cell.jumppoint { background-color: rgba(255, 165, 0, 0.3); }

        /* Estilo especial para la estrella */
        .solar-system-cell.estrella { background-color: rgba(255, 255, 0, 0.3); }

        /* Estilos para flotas */
        .fleet-own { color: green; }
        .fleet-enemy { color: red; }

        /* Efecto de respiración */
        .fleet-selected {
            animation: breathing 1s infinite alternate;
        }

        @@keyframes breathing {
            from { color: white; }
            to { color: green; }
        }

        /* Menú contextual */
        .context-menu {
            display: none;
            position: absolute;
            z-index: 1000;
            background-color: #333;
            color: white;
            border: 1px solid #999;
            padding: 5px;
            border-radius: 5px;
        }

        .context-menu ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        .context-menu li {
            padding: 8px;
            cursor: pointer;
        }

        .context-menu li:hover {
            background-color: #555;
        }
    </style>
}

@section Scripts {
    <script>
        let selectedFleet = null;
        let contextMenu = document.getElementById('contextMenu');

        // Evento para seleccionar una flota con clic izquierdo
        document.querySelectorAll('.fleet-own').forEach(fleetElement => {
            fleetElement.addEventListener('click', function() {
                if (selectedFleet) {
                    selectedFleet.classList.remove('fleet-selected');
                }
                selectedFleet = this;
                this.classList.add('fleet-selected');
            });
        });

        // Evento para deseleccionar cuando se hace clic en otro lugar
        document.addEventListener('click', function(event) {
            if (!event.target.closest('.fleet-own') && selectedFleet) {
                selectedFleet.classList.remove('fleet-selected');
                selectedFleet = null;
            }
        });

        // Evento para mostrar el menú contextual con clic derecho
        document.addEventListener('contextmenu', function (event) {
            event.preventDefault();
            const target = event.target.closest('.solar-system-cell');
            if (!target) return;

            // Capturar las coordenadas X y Y de la celda clicada
            contextMenu.dataset.itemX = target.getAttribute('data-item-x');
            contextMenu.dataset.itemY = target.getAttribute('data-item-y');

            contextMenu.style.display = 'block';
            contextMenu.style.left = event.pageX + 'px';
            contextMenu.style.top = event.pageY + 'px';

            // Mostrar opciones según el contenido de la celda
            document.getElementById('action-view-planet').style.display = target.classList.contains('planet') ? 'block' : 'none';
            document.getElementById('action-mine-asteroid').style.display = target.classList.contains('asteroidfield') ? 'block' : 'none';
            document.getElementById('action-jump-gate').style.display = target.classList.contains('jumppoint') ? 'block' : 'none';

            const fleetEnemy = target.classList.contains('fleet-enemy');
            const fleetOwn = target.classList.contains('fleet-own');
            document.getElementById('action-view-fleet').style.display = fleetOwn ? 'block' : 'none';
            document.getElementById('action-spy-fleet').style.display = fleetEnemy ? 'block' : 'none';
            document.getElementById('action-attack-fleet').style.display = selectedFleet && fleetEnemy ? 'block' : 'none';
            document.getElementById('action-move-fleet').style.display = selectedFleet && !target.classList.contains('estrella') ? 'block' : 'none';
        });


        // Ocultar el menú contextual al hacer clic fuera
        document.addEventListener('click', function() {
            contextMenu.style.display = 'none';
        });

        // Función temporal para recargar la página
        function reloadPage() {
            location.reload();
        }

        // Función para mover la flota
        function moveFleet() {
            if (!selectedFleet) {
                alert("No hay flota seleccionada.");
                return;
            }

            // Obtener ID de la flota seleccionada
            const fleetId = selectedFleet.getAttribute('data-item-id');

            // Obtener las coordenadas de destino de la celda clicada
            const destinationX = contextMenu.dataset.itemX;
            const destinationY = contextMenu.dataset.itemY;

            if (!destinationX || !destinationY) {
                alert("No se pudo determinar el destino.");
                return;
            }

            // Enviar la solicitud AJAX para mover la flota
            $.ajax({
                url: '/SolarSystem/MoveFleet',
                type: 'POST',
                data: {
                    fleetId: fleetId,
                    destinationX: destinationX,
                    destinationY: destinationY
                },
                success: function (response) {
                    if (response.success) {
                        // Actualizar el nombre de la flota para incluir el "*"
                        const fleetElement = document.querySelector(`span[data-item-id='${fleetId}']`);
                        if (fleetElement && !fleetElement.innerText.includes('*')) {
                            fleetElement.innerText += "*";
                        }
                    } else {
                        alert('No se pudo mover la flota.');
                    }
                },
                error: function () {
                    alert('Error al mover la flota.');
                }
            });
        }

        // Update fleet position client-side
        const fleetPaths = @Html.Raw(Json.Serialize(Model.FleetMovements));
        console.log("fleetPaths: ", fleetPaths); // Verifica el contenido

        function updateFleetPositions() {
            if (!fleetPaths || fleetPaths.length === 0) {
                console.log("No fleet paths found");
                return;
            }

            const currentTime = new Date().getTime(); // Obtener tiempo actual en milisegundos
            console.log("Current UTC time in ms: ", currentTime);

            fleetPaths.forEach(path => {
                console.log("path ", path);
                if (!path.arrivalTime || !path.departureTime) {
                    console.error("Skipping path due to missing arrivalTime or departureTime:", path);
                    return;
                }

                // Asegurarse de que las fechas están en formato correcto
                const arrivalTime = Date.parse(path.arrivalTime);
                const departureTime = Date.parse(path.departureTime);

                // Verificación de si las fechas fueron correctamente parseadas
                if (isNaN(arrivalTime) || isNaN(departureTime)) {
                    console.error("Error parsing arrivalTime or departureTime for path:", path);
                    return;
                }

                console.log(`Checking path for fleetId ${path.fleetId}: currentTime: ${currentTime}, arrivalTime: ${arrivalTime}, departureTime: ${departureTime}`);

                // Si estamos en la ventana de tiempo del movimiento
                console.log("currentTime: ", currentTime);
                console.log("departureTime: ", departureTime);
                console.log("arrivalTime: ", arrivalTime);
                console.log("currentTime (" + currentTime + ") >= departureTime (" + departureTime + ") && currentTime (" + currentTime + ") < arrivalTime (" + arrivalTime + ")");
                if (currentTime >= departureTime && currentTime < arrivalTime) {
                    const progress = (currentTime - departureTime) / (arrivalTime - departureTime);
                    console.log(`Progress for fleet ${path.fleetId}: ${progress * 100}%`);
                    const newX = path.fromX + progress * (path.toX - path.fromX);
                    const newY = path.fromY + progress * (path.toY - path.fromY);
                    console.log(`New position for fleet ${path.fleetId}: (${newX}, ${newY})`);
                    moveFleetVisual(path.fleetId, newX, newY);
                } else {
                    console.log(`Fleet ${path.fleetId} is not in movement window.`);
                }
            });
        }

        function moveFleetVisual(fleetId, newX, newY) {
            const fleetElement = document.querySelector(`span[data-item-id='${fleetId}']`);
            if (fleetElement) {
                const targetCell = document.querySelector(`.solar-system-cell[data-item-x='${Math.round(newX)}'][data-item-y='${Math.round(newY)}']`);
                if (targetCell) {
                    console.log(`Moving fleet ${fleetId} to new cell at (${Math.round(newX)}, ${Math.round(newY)})`);
                    targetCell.appendChild(fleetElement);
                }
            }
        }

        setInterval(updateFleetPositions, 1000); // Actualizar cada segundo






    </script>
}
