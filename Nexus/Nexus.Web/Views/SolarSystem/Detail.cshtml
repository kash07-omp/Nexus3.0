@model Nexus.Web.Models.SolarSystemViewModel

<div id="solarsystem" class="detail" data-item-id="@Model.SolarSystem.Id">
    <h2>Detalle del sistema solar: @Model.SolarSystem.Name</h2>

    <div id="solarSystemGrid" style="">
        @for (int y = 1; y <= Model.SolarSystem.GridSizeY; y++)
        {
            @for (int x = 1; x <= Model.SolarSystem.GridSizeX; x++)
            {
                var cellClass = "solar-system-cell";
                var dataItemId = "";
                var cellContent = new List<string>();

                // Estrella en el centro del sistema solar
                if (x == Model.SolarSystem.GridSizeX / 2 + 1 && y == Model.SolarSystem.GridSizeY / 2 + 1)
                {
                    cellClass += " estrella";
                    cellContent.Add("Estrella");
                }
                else
                {
                    // Planetas, campos de asteroides, puertas de salto y flotas
                    var planet = Model.SolarSystem.Planets.FirstOrDefault(p => p.CoordinateX == x && p.CoordinateY == y);
                    var asteroid = Model.SolarSystem.AsteroidFields.FirstOrDefault(a => a.CoordinateX == x && a.CoordinateY == y);
                    var jumpGate = Model.SolarSystem.JumpGates.FirstOrDefault(j => j.CoordinateX == x && j.CoordinateY == y);
                    var fleets = Model.SolarSystem.Fleets.Where(f => f.CoordinateX == x && f.CoordinateY == y).ToList();

                    if (planet != null)
                    {
                        cellClass += " planet";
                        cellContent.Add("Planeta");
                        dataItemId = planet.Id.ToString();

                        // Si el planeta pertenece al usuario actual
                        var userPlanet = planet.Regions.FirstOrDefault(r => r.UserId == Model.CurrentUser.Id);
                        if (userPlanet != null)
                            cellClass += " planet-own";
                    }
                    else if (asteroid != null)
                    {
                        cellClass += " asteroidfield";
                        cellContent.Add("Campo de asteroides");
                        dataItemId = asteroid.Id.ToString();
                    }
                    else if (jumpGate != null)
                    {
                        cellClass += " jumppoint";
                        cellContent.Add("Puerta de salto");
                        dataItemId = jumpGate.Id.ToString();
                    }

                    // Mostrar todas las flotas en la celda
                    foreach (var fleet in fleets)
                    {
                        var fleetClass = fleet.UserId == Model.CurrentUser.Id ? " fleet-own" : " fleet-enemy";
                        var fleetName = fleet.Name;
                        cellContent.Add($"<span class='{fleetClass}' data-item-id='{fleet.Id}'>{fleetName}</span>");
                    }
                }

                <div class="@cellClass" data-item-id="@dataItemId" data-item-x="@x" data-item-y="@y">
                    @Html.Raw(string.Join("<br/>", cellContent))
                </div>
            }
        }
    </div>
</div>

@section Styles {
    <style>
        #solarSystemGrid { display: grid; grid-template-columns: repeat(@Model.SolarSystem.GridSizeX, max-content); grid-template-rows: repeat(@Model.SolarSystem.GridSizeY, max-content); }
    </style>
}
